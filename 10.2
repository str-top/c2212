#include <SPI.h>
#include <MFRC522.h>
#include <Servo.h>

// --- Pin definitions ---
#define RST_PIN 9   // Reset pin (RST)
#define SS_PIN 10   // Slave Select (SDA / SS)

// --- RFID setup ---
MFRC522 mfrc522(SS_PIN, RST_PIN);

// --- Components ---
Servo lockServo;
#define SERVO_PIN 6
#define BUZZER_PIN 7
#define LED_PIN 8

// --- Authorized card UID ---
String authorizedID = "20C3935E";   // замените на UID вашей карты
String tagID = "";

// --- Servo positions ---
#define LOCKED_POS   180
#define UNLOCKED_POS 0

void setup() {
  Serial.begin(9600);
  SPI.begin();
  mfrc522.PCD_Init();

  lockServo.attach(SERVO_PIN);
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(LED_PIN, OUTPUT);

  lockServo.write(LOCKED_POS);
  digitalWrite(LED_PIN, LOW);

  Serial.println(F("Приложите RFID-карту для проверки доступа..."));
}

void loop() {
  if (getID()) {
    Serial.print("ID: ");
    Serial.println(tagID);

    if (tagID == authorizedID) {
      Serial.println("✅ Access Granted!");
      unlockDoor();
    } else {
      Serial.println("❌ Access Denied!");
      denyAccess();
    }
  }
}

boolean getID() {
  if (!mfrc522.PICC_IsNewCardPresent()) return false;
  if (!mfrc522.PICC_ReadCardSerial()) return false;

  tagID = "";
  for (uint8_t i = 0; i < mfrc522.uid.size; i++) {
    if (mfrc522.uid.uidByte[i] < 0x10) tagID += "0";
    tagID += String(mfrc522.uid.uidByte[i], HEX);
  }

  tagID.toUpperCase();
  mfrc522.PICC_HaltA();
  return true;
}

void unlockDoor() {
  lockServo.write(UNLOCKED_POS);
  tone(BUZZER_PIN, 800, 150);
  digitalWrite(LED_PIN, HIGH);
  delay(2000);
  lockServo.write(LOCKED_POS);
  digitalWrite(LED_PIN, LOW);
}

void denyAccess() {
  for (int i = 0; i < 3; i++) {
    tone(BUZZER_PIN, 400, 100);
    digitalWrite(LED_PIN, HIGH);
    delay(100);
    digitalWrite(LED_PIN, LOW);
    delay(100);
  }
}
